<?php

include('mixpanel.api.inc');

include('includes/mixpanel.node.inc');
include('includes/mixpanel.user.inc');
include('includes/mixpanel.comment.inc');
include('includes/mixpanel.og.inc');


/**
 * Implementation of hook_init().
 */
function mixpanel_init() {
  $token = variable_get('mixpanel_token', '');
  if (!empty($token)) {
    global $user;
    if ($user->uid != 0) {
      drupal_add_js(drupal_get_path('module', 'mixpanel') . "/mixpanel.js");

      $defaults_wrapped = array('defaults' => mixpanel_get_defaults());
      drupal_add_js(array('mixpanel' => $defaults_wrapped), 'setting');
    }
  // Add the Mixpanel tracking code to HTML Head.
  $mixpanel_init_code = <<<code
<script type="text/javascript">
var mpq = [];
mpq.push(["init", "$token"]);
(function() {
var mp = document.createElement("script"); mp.type = "text/javascript"; mp.async = true;
mp.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + "//api.mixpanel.com/site_media/js/api/mixpanel.js";
var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(mp, s);
})();
</script>
code;
    drupal_set_html_head($mixpanel_init_code);
  }

  // Track visits to user pages.
  if (arg(0) == "user" && is_numeric(arg(1))) {
    mixpanel_track("user-view-profile", array('visited-user' => arg(1)));
  }

}

/**
 * Implementation of hook_menu(). 
 */
function mixpanel_menu() {
  # Administration
  $items['admin/settings/mixpanel'] = array(
    'title' => 'Mixpanel',
    'description' => t('Add your Mixpanel token for this domain.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mixpanel_admin_settings'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/** 
 * Admin settings form 
 */
function mixpanel_admin_settings() {
  $form['mixpanel_token'] = array(
    '#title' => t('Mixpanel Token'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mixpanel_token', ''),
    '#description' => t('The token you got from mixpanel.com for this domain.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_requirements().
 */
function mixpanel_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Raise warning if mixpanel token has not been set yet.
    if (variable_get('mixpanel_token', '') == '') {
      $requirements['mixpanel'] = array(
        'title' => t('Mixpanel module'),
        'description' => t('The Mixpanel module has not been configured yet. Please configure its settings from the <a href="@url">Mixpanel settings page</a>.', array('@url' => url('admin/settings/mixpanel'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }
  }

  return $requirements;
}

/**
 * Setup default variables for Mixpanel to send.
 *
 * @return array of the default mixpanel variables.
 **/
function mixpanel_get_defaults($user = NULL, $reset = FALSE) {
  static $defaults;

  // If user object is passed in, favor that, otherwise, set $account = the current object.
  if($account == NULL) {
    global $user;
    $account = $user;
  }

  if (!isset($defaults) || $reset) {
    $cohort = format_date($account->created, 'custom', "M-Y");
    $defaults = array('uid' => $account->uid,
                       'cohort' => $cohort,
                       'distinct_id' => $account->uid,
                       'ip' => $_SERVER['REMOTE_ADDR'],
    );

    // Let other modules alter the defaults.
    drupal_alter('mixpanel_defaults', $defaults);
  }

  return $defaults;
}


function mixpanel_track($event, $custom_properties = array(), $account = NULL) {
  if (variable_get('mixpanel_token', '') == '') {
    return;
  }
  
  // We don't track events for anonymous users.
  if ($user->uid == 0 && empty($account)) {
    return;
  }
  
  // Setup default properties.
  $properties = mixpanel_get_defaults($account);

  // Let other modules alter the properties.
  drupal_alter('mixpanel_event_properties', $properties);

  // Merge default properties with any passed-in properties. Any passed-in properties will overwrite the defaults.
  if (!empty($custom_properties)) {
    $properties = array_merge($properties, $custom_properties);
  }
  $token = variable_get('mixpanel_token', '');
  $metrics = new MetricsTracker($token);
  $metrics->track($event, $properties);
}



/**
 * Implementation of hook_form_alter().
 */
function mixpanel_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'contact_mail_user':
      $form['#submit'][] = "mixpanel_contact_mail_user_submit";
      break;
    case 'user_profile_form':
      $form['#submit'][] = "mixpanel_user_profile_form_submit";
      break;
    case 'search_theme_form':
      $form['#submit'][] = "mixpanel_search_theme_form_submit";
      break;
  }
}