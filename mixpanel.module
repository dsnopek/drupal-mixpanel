<?php

define('MIXPANEL_API_URL', 'http://api.mixpanel.com/');

/**
 * Implementation of hook_init().
 */
function mixpanel_init() {
  $token = variable_get('mixpanel_token', '');
  if (!empty($token)) {
    global $user;
    if ($user->uid != 0) {
      drupal_add_js(drupal_get_path('module', 'mixpanel') . "/mixpanel.js");

      $defaults_wrapped = array('defaults' => mixpanel_get_defaults(), 'people' => mixpanel_get_people_data());
      drupal_add_js(array('mixpanel' => $defaults_wrapped), 'setting');
    }

    // Convert the token string to JavaScript to prevent an XSS attack
    $token = drupal_to_js($token);

    // Add the Mixpanel tracking code to HTML Head.
    if (variable_get('mixpanel_library_version', '2.0') == '1.0') {
      $mixpanel_init_code = <<<code
<script type="text/javascript">
var mpq = [];
mpq.push(["init", $token]);
(function() {
var mp = document.createElement("script"); mp.type = "text/javascript"; mp.async = true;
mp.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + "//api.mixpanel.com/site_media/js/api/mixpanel.js";
var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(mp, s);
})();
</script>
code;
    }
    else {
      $mixpanel_init_code = <<<code
<script type="text/javascript">
(function(c,a){window.mixpanel=a;var b,d,h,e;b=c.createElement("script");b.type="text/javascript";b.async=!0;b.src=("https:"===c.location.protocol?"https:":"http:")+'//cdn.mxpnl.com/libs/mixpanel-2.1.min.js';d=c.getElementsByTagName("script")[0];d.parentNode.insertBefore(b,d);a._i=[];a.init=function(b,c,f){function d(a,b){var c=b.split(".");2==c.length&&(a=a[c[0]],b=c[1]);a[b]=function(){a.push([b].concat(Array.prototype.slice.call(arguments,0)))}}var g=a;"undefined"!==typeof f?
g=a[f]=[]:f="mixpanel";g.people=g.people||[];h="disable track track_pageview track_links track_forms register register_once unregister identify name_tag set_config people.identify people.set people.increment".split(" ");for(e=0;e<h.length;e++)d(g,h[e]);a._i.push([b,c,f])};a.__SV=1.1})(document,window.mixpanel||[]);
mixpanel.init($token);
</script>
code;
    }
    drupal_set_html_head($mixpanel_init_code);
  }
}

/**
 * Implementation of hook_menu().
 */
function mixpanel_menu() {
  # Administration
  $items['admin/settings/mixpanel'] = array(
    'title' => 'Mixpanel',
    'description' => t('Add your Mixpanel token for this domain.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mixpanel_admin_settings'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Admin settings form
 */
function mixpanel_admin_settings() {
  $form['mixpanel_token'] = array(
    '#title' => t('Mixpanel Token'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mixpanel_token', ''),
    '#description' => t('The token you got from mixpanel.com for this domain.'),
  );

  $form['mixpanel_library_version'] = array(
    '#title' => t('Mixpanel Javascript library version'),
    '#type' => 'radios',
    '#options' => array(
      '1.0' => t('1.0 - <em>Don\'t use unless you have legacy code which depends on 1.0!</em>'),
      '2.0' => '2.0',
    ),
    '#default_value' => variable_get('mixpanel_library_version', '2.0'),
    '#description' => t('In April 2012, Mixpanel updated their Javascript library to version 2.0. It adds several new features but unfortunately has a completely new API. Unless you have legacy code which depends on 1.0, you should be using 2.0!'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_requirements().
 */
function mixpanel_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Raise warning if mixpanel token has not been set yet.
    if (variable_get('mixpanel_token', '') == '') {
      $requirements['mixpanel'] = array(
        'title' => t('Mixpanel module'),
        'description' => t('The Mixpanel module has not been configured yet. Please configure its settings from the <a href="@url">Mixpanel settings page</a>.', array('@url' => url('admin/settings/mixpanel'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }
  }

  return $requirements;
}

/**
 * Implementation of hook_cron_queue_info().
 */
function mixpanel_cron_queue_info() {
  return array(
    'mixpanel_track' => array(
      'worker callback' => '_mixpanel_track_queue_callback',
    ),
  );
}

/**
 * Setup default variables for Mixpanel to send.
 *
 * @return array of the default mixpanel variables.
 **/
function mixpanel_get_defaults($account = NULL, $reset = FALSE) {
  static $defaults = array();

  // If user object is passed in, favor that, otherwise, set $account = the current object.
  if($account == NULL) {
    global $user;
    $account = $user;
  }

  if (!isset($defaults[$account->uid]) || $reset) {
    $cohort = format_date($account->created, 'custom', "M-Y");
    $defaults[$account->uid] = array(
      'uid' => $account->uid,
      'user_created' => $account->created,
      'cohort' => $cohort,
      'mp_name_tag' => $account->name,
      'distinct_id' => $account->uid,
      'ip' => ip_address(),
    );

    // Let other modules alter the defaults.
    drupal_alter('mixpanel_defaults', $defaults[$account->uid], $account);
  }

  return $defaults[$account->uid];
}

/**
 * Get information about a user account for Mixpanel 'People' data.
 *
 * @return array of values to pass to Mixpanel.people.set().
 */
function mixpanel_get_people_data($account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  $default_timezone = date_default_timezone_get();
  date_default_timezone_set('UTC');

  $datefmt = 'Y-m-d H:i:s';

  $data = array(
    '$email' => $account->mail,
    '$created' => date($datefmt, $account->created),
    '$last_login' => date($datefmt, $account->login),
  );

  date_default_timezone_set($default_timezone);

  drupal_alter('mixpanel_people_data', $data, $account);

  return $data;
}

function mixpanel_track($event, $custom_properties = array(), $account = NULL) {
  global $user;
  
  $token = variable_get('mixpanel_token', '');
  if ($token == '') {
    return;
  }

  // We don't track events for anonymous users.
  if ($user->uid == 0 && empty($account)) {
    return;
  }

  // Setup default properties.
  $properties = mixpanel_get_defaults($account);

  // Merge default properties with any passed-in properties. Any passed-in properties will overwrite the defaults.
  if (!empty($custom_properties)) {
    $properties = array_merge($properties, $custom_properties);
  }
  
  // Let other modules alter the properties.
  drupal_alter('mixpanel_event', $properties, $event, $account);

  // These properties can't be overridden
  $properties['token'] = $token;
  $properties['time'] = time();

  if (module_exists('drupal_queue')) {
    // if possible, we queue up the API call to actually be made on cron
    $queue = drupal_queue_get('mixpanel_track');
    $queue->createItem(array('event' => $event, 'properties' => $properties));
  }
  else {
    // Actually send the request NOW.
    _mixpanel_track($event, $properties);
  }
}

function _mixpanel_track($event, $properties) {
  $params = array(
    'event' => $event,
    'properties' => $properties,
  );
  $url = MIXPANEL_API_URL . 'track/?data=' . base64_encode(drupal_to_js($params));

  $result = drupal_http_request($url);

  if ($result->code != 200) {
    watchdog('mixpanel', 'Unable send event %event to Mixpanel with properties: %properties', array('%event' => $event, '%properties' => drupal_to_js($properties), WATCHDOG_ERROR));
    return FALSE;
  }

  return TRUE;
}

function _mixpanel_track_queue_callback($item) {
  // actually send the request to the Mixpanel API
  $success = _mixpanel_track($item['event'], $item['properties']);

  // if it was unsuccessful, we re-queue the item
  if (!$success) {
    $queue = drupal_queue_get('mixpanel_track');
    $queue->createItem($item);
  }
}

/**
 * Implementation of hook_block().
 */
function mixpanel_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'mixpanel_badge_dark' => array(
        'info' => t('Mixpanel badge (dark)'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'mixpanel_badge_light' => array(
        'info' => t('Mixpanel badge (light)'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
    );
  }

  if ($op == 'view') {
    $img = 'badge_' . ($delta == 'mixpanel_badge_dark' ? 'blue' : 'light') . '.png';
    return array(
      'subject' => NULL,
      'content' => '<a href="http://mixpanel.com/f/partner"><img src="http://mixpanel.com/site_media/images/partner/' . $img . '" alt="Real Time Web Analytics" /></a>',
    );
  }
}
