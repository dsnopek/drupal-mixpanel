<?php

include('mixpanel.api.inc');

/**
 * Implementation of hook_init().
 */
function mixpanel_init() {
  $token = variable_get('mixpanel_token', '');
  if (!empty($token)) {
    global $user;
    if ($user->uid != 0) {
      drupal_add_js(drupal_get_path('module', 'mixpanel') . "/mixpanel.js");

      $defaults_wrapped = array('defaults' => mixpanel_get_defaults());
      drupal_add_js(array('mixpanel' => $defaults_wrapped), 'setting');
    }
    // Convert the token string to JavaScript to prevent an XSS attack
    $token = drupal_to_js($token);
    // Add the Mixpanel tracking code to HTML Head.
    $mixpanel_init_code = <<<code
<script type="text/javascript">
var mpq = [];
mpq.push(["init", $token]);
(function() {
var mp = document.createElement("script"); mp.type = "text/javascript"; mp.async = true;
mp.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + "//api.mixpanel.com/site_media/js/api/mixpanel.js";
var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(mp, s);
})();
</script>
code;
    drupal_set_html_head($mixpanel_init_code);
  }
}

/**
 * Implementation of hook_menu().
 */
function mixpanel_menu() {
  # Administration
  $items['admin/settings/mixpanel'] = array(
    'title' => 'Mixpanel',
    'description' => t('Add your Mixpanel token for this domain.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mixpanel_admin_settings'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Admin settings form
 */
function mixpanel_admin_settings() {
  $form['mixpanel_token'] = array(
    '#title' => t('Mixpanel Token'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mixpanel_token', ''),
    '#description' => t('The token you got from mixpanel.com for this domain.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_requirements().
 */
function mixpanel_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Raise warning if mixpanel token has not been set yet.
    if (variable_get('mixpanel_token', '') == '') {
      $requirements['mixpanel'] = array(
        'title' => t('Mixpanel module'),
        'description' => t('The Mixpanel module has not been configured yet. Please configure its settings from the <a href="@url">Mixpanel settings page</a>.', array('@url' => url('admin/settings/mixpanel'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_cron_queue_info().
 */
function mixpanel_cron_queue_info() {
  return array(
    'mixpanel_track' => array(
      'worker callback' => '_mixpanel_track_queue_callback',
    ),
  );
}

/**
 * Returns a string representing the browser making the request, in a way that
 * is ccompatible with the Mixpanel Javascript library's $browser property.
 */
function _mixpanel_get_browser() {
  $ua = $_SERVER['HTTP_USER_AGENT'];

  // NOTE: This wasn't a direct port of the Mixpanel Javascript code, because it
  // uses the navigator.vendor and window.opera properties, that we don't have
  // access to. Luckily, the 'vendor' comes from the user agent, so can use that
  // with hopefully the same effect!

  if (preg_match('/Opera/', $ua)) {
    if (preg_match('/Mini/', $ua)) {
      return 'Opera Mini';
    }
    return 'Opera';
  }
  elseif (preg_match('/(BlackBerry|PlayBook|BB10)/i', $ua)) {
    return 'BlackBerry';
  }
  elseif (preg_match('/Chrome/', $ua)) {
    return 'Chrome';
  }
  elseif (preg_match('/Apple/', $ua)) {
    if (preg_match('/Mobile/', $ua)) {
      return 'Mobile Safari';
    }
    return 'Safari';
  }
  elseif (preg_match('/Android/', $ua)) {
    return 'Android Mobile';
  }
  elseif (preg_match('/Konqueror/', $ua)) {
    return 'Konqueror';
  }
  elseif (preg_match('/Firefox/', $ua)) {
    return 'Firefox';
  }
  elseif (preg_match('/MSIE/', $ua)) {
    return 'Internet Explorer';
  }
  elseif (preg_match('/Gecko/', $ua)) {
    return 'Mozilla';
  }

  return '';
}

/**
 * Returns a string representing the OS making the request, in a way that
 * is ccompatible with the Mixpanel Javascript library's $os property.
 */
function _mixpanel_get_os() {
  $ua = $_SERVER['HTTP_USER_AGENT'];

  if (preg_match('/Windows/i', $ua)) {
    if (preg_match('/Phone/', $ua)) {
      return 'Windows Mobile';
    }
    return 'Windows';
  }
  elseif (preg_match('/(iPhone|iPad|iPod)/', $ua)) {
    return 'iOS';
  }
  elseif (preg_match('/Android/', $ua)) {
    return 'Android';
  }
  elseif (preg_match('/(BlackBerry|PlayBook|BB10)/i', $ua)) {
    return 'BlackBerry';
  }
  elseif (preg_match('/Mac/i', $ua)) {
    return 'Mac OS X';
  }
  elseif (preg_match('/Linux/', $ua)) {
    return 'Linux';
  }

  return '';
}

/**
 * Returns a string representing the device making the request, in a way that
 * is ccompatible with the Mixpanel Javascript library's $device property.
 */
function _mixpanel_get_device() {
  $ua = $_SERVER['HTTP_USER_AGENT'];

  if (preg_match('/iPhone/', $ua)) {
    return 'iPhone';
  }
  elseif (preg_match('/iPad/', $ua)) {
    return 'iPad';
  }
  elseif (preg_match('/iPod/', $ua)) {
    return 'iPod Touch';
  }
  elseif (preg_match('/(BlackBerry|PlayBook|BB10)/i', $ua)) {
    return 'BlackBerry';
  }
  elseif (preg_match('/Windows Phone/i', $ua)) {
    return 'Windows Phone';
  }
  elseif (preg_match('/Android/', $ua)) {
    return 'Android';
  }

  return '';
}

/**
 * Returns referring domain for the current request, in a way that is
 * ccompatible with the Mixpanel Javascript library's $referring_domain
 * property.
 */
function _mixpanel_get_referring_domain() {
  $parts = explode('/', $_SERVER['HTTP_REFERER']);
  if (count($parts) >= 3) {
    return $parts[2];
  }
  return '';
}

/**
 * Setup default variables for Mixpanel to send.
 *
 * @return array of the default mixpanel variables.
 **/
function mixpanel_get_defaults($account = NULL, $reset = FALSE) {
  static $defaults;

  // If user object is passed in, favor that, otherwise, set $account = the current object.
  if($account == NULL) {
    global $user;
    $account = $user;
  }

  if (!isset($defaults[$account->uid]) || $reset) {
    $properties = array(
      'ip' => ip_address(),
      '$browser' => _mixpanel_get_browser(),
      '$os' => _mixpanel_get_os(),
      '$device' => _mixpanel_get_device(),
      '$referrer' => $_SERVER['HTTP_REFERER'],
      '$referring_domain' => _mixpanel_get_referring_domain(),
    );

    // for authenticated users
    if ($account->uid != 0) {
      // TODO: some of these probably belong in mixpanel_defaults!
      $cohort = format_date($account->created, 'custom', "M-Y");
      $properties = array_merge($properties, array(
        'uid' => $account->uid,
        'user_created' => $account->created,
        'cohort' => $cohort,
        'mp_name_tag' => $account->name,
        'distinct_id' => $account->uid,
      ));
    }

    // Let other modules alter the defaults.
    drupal_alter('mixpanel_defaults', $properties, $account);

    $defaults[$account->uid] = $properties;
  }

  return $defaults[$account->uid];
}

function mixpanel_track($event, $custom_properties = array(), $account = NULL) {
  global $user;

  $token = variable_get('mixpanel_token', '');
  if ($token == '') {
    return;
  }

  // We don't track events for anonymous users.
  if ($user->uid == 0 && empty($account)) {
    return;
  }

  // Setup default properties.
  $properties = mixpanel_get_defaults($account);

  // Merge default properties with any passed-in properties. Any passed-in properties will overwrite the defaults.
  if (!empty($custom_properties)) {
    $properties = array_merge($properties, $custom_properties);
  }
  
  // Let other modules alter the properties.
  drupal_alter('mixpanel_event', $properties, $event);
  
//  dsm(array('event'=>$event, 'prop' => $properties));
  $token = variable_get('mixpanel_token', '');
  $metrics = new MetricsTracker($token);
  $metrics->track($event, $properties);
}

/**
 * Implementation of hook_block().
 */
function mixpanel_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'mixpanel_badge_dark' => array(
        'info' => t('Mixpanel badge (dark)'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'mixpanel_badge_light' => array(
        'info' => t('Mixpanel badge (light)'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
    );
  }

  if ($op == 'view') {
    $img = 'badge_' . ($delta == 'mixpanel_badge_dark' ? 'blue' : 'light') . '.png';
    return array(
      'subject' => NULL,
      'content' => '<a href="http://mixpanel.com/f/partner"><img src="http://mixpanel.com/site_media/images/partner/' . $img . '" alt="Real Time Web Analytics" /></a>',
    );
  }
}
